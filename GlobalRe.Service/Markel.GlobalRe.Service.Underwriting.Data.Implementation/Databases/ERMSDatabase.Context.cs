

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "Markel.GlobalRe.Service.Underwriting.Data.Implementation\app.config"
//     Connection String Name: "ERMSDbContext"
//     Connection String:      "Server=ERMSDB_DEV;Database=GRS_ERMS;Trusted_Connection=True;Connect Timeout=5000;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Enterprise Edition: Core-based Licensing (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.61
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.Data.Entity.Infrastructure;
using System.Xml.Serialization;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using Markel.GlobalRe.Service.Underwriting.Data.Models;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace Markel.GlobalRe.Service.Underwriting.Data.Databases
{
    // ************************************************************************
    // Unit of work
    public interface IERMSDbContext : IDisposable, EntityFramework.DbContextScope.Interfaces.IDbContext
	{
        DbSet<CfgRole> CfgRoles { get; set; } // cfgRole
        DbSet<CfgRolePerson> CfgRolePersons { get; set; } // cfgRolePerson
        DbSet<grs_TblUserview> grs_TblUserviews { get; set; } // tbl_userviews
        DbSet<grs_VCatalogItemsExt> grs_VCatalogItemsExts { get; set; } // v_CatalogItemsExt
        DbSet<grs_VDmsFileType> grs_VDmsFileTypes { get; set; } // v_DMSFileType
        DbSet<grs_VExposureTreeExt> grs_VExposureTreeExts { get; set; } // v_ExposureTreeExt
        DbSet<grs_VGrDealStatu> grs_VGrDealStatus { get; set; } // v_GRDealStatus
        DbSet<grs_VGrsBroker> grs_VGrsBrokers { get; set; } // v_GRSBrokers
        DbSet<grs_VGrsCedant> grs_VGrsCedants { get; set; } // v_GRSCedants
        DbSet<grs_VGrsChecklistsByDeal> grs_VGrsChecklistsByDeals { get; set; } // v_GRSChecklistsByDeal
        DbSet<grs_VGrsContractType> grs_VGrsContractTypes { get; set; } // v_GRSContractTypes
        DbSet<grs_VGrsDeal> grs_VGrsDeals { get; set; } // v_GRSDeals
        DbSet<grs_VGrsDealCoverage> grs_VGrsDealCoverages { get; set; } // v_GRSDealCoverages
        DbSet<grs_VGrsDealsByStatu> grs_VGrsDealsByStatus { get; set; } // v_GRSDealsByStatus
        DbSet<grs_VGrsNote> grs_VGrsNotes { get; set; } // v_GRSNotes
        DbSet<grs_VGrsUserView> grs_VGrsUserViews { get; set; } // v_GRSUserView
        DbSet<grs_VGrsWritingCompany> grs_VGrsWritingCompanies { get; set; } // v_GRSWritingCompany
        DbSet<grs_VKeyDocument> grs_VKeyDocuments { get; set; } // v_KeyDocuments
        DbSet<grs_VPaperExt> grs_VPaperExts { get; set; } // v_PaperExt
        DbSet<TbCatalogdef> TbCatalogdefs { get; set; } // tb_catalogdef
        DbSet<TbCatalogitem> TbCatalogitems { get; set; } // tb_catalogitems
        DbSet<TbChklistval> TbChklistvals { get; set; } // tb_chklistvals
        DbSet<TbClaus> TbClaus { get; set; } // tb_clauses
        DbSet<TbComGrpReq> TbComGrpReqs { get; set; } // tb_ComGrpReq
        DbSet<TbDealnote> TbDealnotes { get; set; } // tb_dealnotes
        DbSet<TbDealPipeline> TbDealPipelines { get; set; } // tb_deal_pipeline
        DbSet<TbDocChkValue> TbDocChkValues { get; set; } // tb_DocChkValue
        DbSet<TblDeal> TblDeals { get; set; } // tbl_deals
        DbSet<TbPerson> TbPersons { get; set; } // tb_Person
        DbSet<TbUser> TbUsers { get; set; } // tb_user

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
        int SpLckLockItem(int? categoryId, int? itemId, DateTime? expirationTime, int? userId, bool? isEditLock, string notes, out string errorMessage);
        int SpLckUnLockExpiredItems();
        int SpLckUnLockItem(int? categoryId, int? itemId, int? userId);
        int grs_EvaluateConfigSetting(int? dealNumber, string settingname, out string result);
        List<grs_PrGetGrsDealCountByStatus> grs_PrGetGrsDealCountByStatus(string exposurelist, string ermsPersonId);
        List<grs_PrGetGrsDealCountByStatus> grs_PrGetGrsDealCountByStatus(string exposurelist, string ermsPersonId, out int procResult);
        List<grs_PrLckGetLockedItem> grs_PrLckGetLockedItem(int? categoryId, int? itemId, int? userId);
        List<grs_PrLckGetLockedItem> grs_PrLckGetLockedItem(int? categoryId, int? itemId, int? userId, out int procResult);
    }

    // ************************************************************************
    // Database context
    public partial class ERMSDbContext : DbContext, IERMSDbContext
    {
        public DbSet<CfgRole> CfgRoles { get; set; } // cfgRole
        public DbSet<CfgRolePerson> CfgRolePersons { get; set; } // cfgRolePerson
        public DbSet<grs_TblUserview> grs_TblUserviews { get; set; } // tbl_userviews
        public DbSet<grs_VCatalogItemsExt> grs_VCatalogItemsExts { get; set; } // v_CatalogItemsExt
        public DbSet<grs_VDmsFileType> grs_VDmsFileTypes { get; set; } // v_DMSFileType
        public DbSet<grs_VExposureTreeExt> grs_VExposureTreeExts { get; set; } // v_ExposureTreeExt
        public DbSet<grs_VGrDealStatu> grs_VGrDealStatus { get; set; } // v_GRDealStatus
        public DbSet<grs_VGrsBroker> grs_VGrsBrokers { get; set; } // v_GRSBrokers
        public DbSet<grs_VGrsCedant> grs_VGrsCedants { get; set; } // v_GRSCedants
        public DbSet<grs_VGrsChecklistsByDeal> grs_VGrsChecklistsByDeals { get; set; } // v_GRSChecklistsByDeal
        public DbSet<grs_VGrsContractType> grs_VGrsContractTypes { get; set; } // v_GRSContractTypes
        public DbSet<grs_VGrsDeal> grs_VGrsDeals { get; set; } // v_GRSDeals
        public DbSet<grs_VGrsDealCoverage> grs_VGrsDealCoverages { get; set; } // v_GRSDealCoverages
        public DbSet<grs_VGrsDealsByStatu> grs_VGrsDealsByStatus { get; set; } // v_GRSDealsByStatus
        public DbSet<grs_VGrsNote> grs_VGrsNotes { get; set; } // v_GRSNotes
        public DbSet<grs_VGrsUserView> grs_VGrsUserViews { get; set; } // v_GRSUserView
        public DbSet<grs_VGrsWritingCompany> grs_VGrsWritingCompanies { get; set; } // v_GRSWritingCompany
        public DbSet<grs_VKeyDocument> grs_VKeyDocuments { get; set; } // v_KeyDocuments
        public DbSet<grs_VPaperExt> grs_VPaperExts { get; set; } // v_PaperExt
        public DbSet<TbCatalogdef> TbCatalogdefs { get; set; } // tb_catalogdef
        public DbSet<TbCatalogitem> TbCatalogitems { get; set; } // tb_catalogitems
        public DbSet<TbChklistval> TbChklistvals { get; set; } // tb_chklistvals
        public DbSet<TbClaus> TbClaus { get; set; } // tb_clauses
        public DbSet<TbComGrpReq> TbComGrpReqs { get; set; } // tb_ComGrpReq
        public DbSet<TbDealnote> TbDealnotes { get; set; } // tb_dealnotes
        public DbSet<TbDealPipeline> TbDealPipelines { get; set; } // tb_deal_pipeline
        public DbSet<TbDocChkValue> TbDocChkValues { get; set; } // tb_DocChkValue
        public DbSet<TblDeal> TblDeals { get; set; } // tbl_deals
        public DbSet<TbPerson> TbPersons { get; set; } // tb_Person
        public DbSet<TbUser> TbUsers { get; set; } // tb_user
        
        static ERMSDbContext()
        {
            System.Data.Entity.Database.SetInitializer<ERMSDbContext>(null);
        }

        public ERMSDbContext() : base("Name=ERMSDbContext")
        {
            InitializePartial();
        }

//        public ERMSDbContext(string connectionString) : base(connectionString)
//        {
//            InitializePartial();
////        }
//
//        public ERMSDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
//        {
//            InitializePartial();
////        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CfgRoleMapping());
            modelBuilder.Configurations.Add(new CfgRolePersonMapping());
            modelBuilder.Configurations.Add(new grs_TblUserviewMapping());
            modelBuilder.Configurations.Add(new grs_VCatalogItemsExtMapping());
            modelBuilder.Configurations.Add(new grs_VDmsFileTypeMapping());
            modelBuilder.Configurations.Add(new grs_VExposureTreeExtMapping());
            modelBuilder.Configurations.Add(new grs_VGrDealStatuMapping());
            modelBuilder.Configurations.Add(new grs_VGrsBrokerMapping());
            modelBuilder.Configurations.Add(new grs_VGrsCedantMapping());
            modelBuilder.Configurations.Add(new grs_VGrsChecklistsByDealMapping());
            modelBuilder.Configurations.Add(new grs_VGrsContractTypeMapping());
            modelBuilder.Configurations.Add(new grs_VGrsDealMapping());
            modelBuilder.Configurations.Add(new grs_VGrsDealCoverageMapping());
            modelBuilder.Configurations.Add(new grs_VGrsDealsByStatuMapping());
            modelBuilder.Configurations.Add(new grs_VGrsNoteMapping());
            modelBuilder.Configurations.Add(new grs_VGrsUserViewMapping());
            modelBuilder.Configurations.Add(new grs_VGrsWritingCompanyMapping());
            modelBuilder.Configurations.Add(new grs_VKeyDocumentMapping());
            modelBuilder.Configurations.Add(new grs_VPaperExtMapping());
            modelBuilder.Configurations.Add(new TbCatalogdefMapping());
            modelBuilder.Configurations.Add(new TbCatalogitemMapping());
            modelBuilder.Configurations.Add(new TbChklistvalMapping());
            modelBuilder.Configurations.Add(new TbClausMapping());
            modelBuilder.Configurations.Add(new TbComGrpReqMapping());
            modelBuilder.Configurations.Add(new TbDealnoteMapping());
            modelBuilder.Configurations.Add(new TbDealPipelineMapping());
            modelBuilder.Configurations.Add(new TbDocChkValueMapping());
            modelBuilder.Configurations.Add(new TblDealMapping());
            modelBuilder.Configurations.Add(new TbPersonMapping());
            modelBuilder.Configurations.Add(new TbUserMapping());

            OnModelCreatingPartial(modelBuilder);
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CfgRoleMapping(schema));
            modelBuilder.Configurations.Add(new CfgRolePersonMapping(schema));
            modelBuilder.Configurations.Add(new grs_TblUserviewMapping(schema));
            modelBuilder.Configurations.Add(new grs_VCatalogItemsExtMapping(schema));
            modelBuilder.Configurations.Add(new grs_VDmsFileTypeMapping(schema));
            modelBuilder.Configurations.Add(new grs_VExposureTreeExtMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrDealStatuMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrsBrokerMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrsCedantMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrsChecklistsByDealMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrsContractTypeMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrsDealMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrsDealCoverageMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrsDealsByStatuMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrsNoteMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrsUserViewMapping(schema));
            modelBuilder.Configurations.Add(new grs_VGrsWritingCompanyMapping(schema));
            modelBuilder.Configurations.Add(new grs_VKeyDocumentMapping(schema));
            modelBuilder.Configurations.Add(new grs_VPaperExtMapping(schema));
            modelBuilder.Configurations.Add(new TbCatalogdefMapping(schema));
            modelBuilder.Configurations.Add(new TbCatalogitemMapping(schema));
            modelBuilder.Configurations.Add(new TbChklistvalMapping(schema));
            modelBuilder.Configurations.Add(new TbClausMapping(schema));
            modelBuilder.Configurations.Add(new TbComGrpReqMapping(schema));
            modelBuilder.Configurations.Add(new TbDealnoteMapping(schema));
            modelBuilder.Configurations.Add(new TbDealPipelineMapping(schema));
            modelBuilder.Configurations.Add(new TbDocChkValueMapping(schema));
            modelBuilder.Configurations.Add(new TblDealMapping(schema));
            modelBuilder.Configurations.Add(new TbPersonMapping(schema));
            modelBuilder.Configurations.Add(new TbUserMapping(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(DbModelBuilder modelBuilder);
        
        // Stored Procedures
        public int SpLckLockItem(int? categoryId, int? itemId, DateTime? expirationTime, int? userId, bool? isEditLock, string notes, out string errorMessage)
        {
            var categoryIdParam = new SqlParameter { ParameterName = "@CategoryID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = DBNull.Value;

            var itemIdParam = new SqlParameter { ParameterName = "@ItemID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = itemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!itemId.HasValue)
                itemIdParam.Value = DBNull.Value;

            var expirationTimeParam = new SqlParameter { ParameterName = "@ExpirationTime", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = expirationTime.GetValueOrDefault() };
            if (!expirationTime.HasValue)
                expirationTimeParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@UserID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var isEditLockParam = new SqlParameter { ParameterName = "@IsEditLock", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isEditLock.GetValueOrDefault() };
            if (!isEditLock.HasValue)
                isEditLockParam.Value = DBNull.Value;

            var notesParam = new SqlParameter { ParameterName = "@Notes", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = notes, Size = 250 };
            if (notesParam.Value == null)
                notesParam.Value = DBNull.Value;

            var errorMessageParam = new SqlParameter { ParameterName = "@ErrorMessage", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Output, Size = 255 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[sp_Lck_LockItem] @CategoryID, @ItemID, @ExpirationTime, @UserID, @IsEditLock, @Notes, @ErrorMessage OUTPUT", categoryIdParam, itemIdParam, expirationTimeParam, userIdParam, isEditLockParam, notesParam, errorMessageParam, procResultParam);
            if (IsSqlParameterNull(errorMessageParam))
                errorMessage = default(string);
            else
                errorMessage = (string) errorMessageParam.Value;
 
            return (int) procResultParam.Value;
        }

        public int SpLckUnLockExpiredItems()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[sp_Lck_UnLockExpiredItems] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int SpLckUnLockItem(int? categoryId, int? itemId, int? userId)
        {
            var categoryIdParam = new SqlParameter { ParameterName = "@CategoryID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = DBNull.Value;

            var itemIdParam = new SqlParameter { ParameterName = "@ItemID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = itemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!itemId.HasValue)
                itemIdParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@UserID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[sp_Lck_UnLockItem] @CategoryID, @ItemID, @UserID", categoryIdParam, itemIdParam, userIdParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int grs_EvaluateConfigSetting(int? dealNumber, string settingname, out string result)
        {
            var dealNumberParam = new SqlParameter { ParameterName = "@dealNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = dealNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dealNumber.HasValue)
                dealNumberParam.Value = DBNull.Value;

            var settingnameParam = new SqlParameter { ParameterName = "@settingname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = settingname, Size = 255 };
            if (settingnameParam.Value == null)
                settingnameParam.Value = DBNull.Value;

            var resultParam = new SqlParameter { ParameterName = "@result", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 255 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [grs].[EvaluateConfigSetting] @dealNumber, @settingname, @result OUTPUT", dealNumberParam, settingnameParam, resultParam, procResultParam);
            if (IsSqlParameterNull(resultParam))
                result = default(string);
            else
                result = (string) resultParam.Value;
 
            return (int) procResultParam.Value;
        }

        public List<grs_PrGetGrsDealCountByStatus> grs_PrGetGrsDealCountByStatus(string exposurelist, string ermsPersonId)
        {
            int procResult;
            return grs_PrGetGrsDealCountByStatus(exposurelist, ermsPersonId, out procResult);
        }

        public List<grs_PrGetGrsDealCountByStatus> grs_PrGetGrsDealCountByStatus(string exposurelist, string ermsPersonId, out int procResult)
        {
            var exposurelistParam = new SqlParameter { ParameterName = "@Exposurelist", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = exposurelist, Size = 1000 };
            if (exposurelistParam.Value == null)
                exposurelistParam.Value = DBNull.Value;

            var ermsPersonIdParam = new SqlParameter { ParameterName = "@ERMSPersonID", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = ermsPersonId, Size = 1000 };
            if (ermsPersonIdParam.Value == null)
                ermsPersonIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<grs_PrGetGrsDealCountByStatus>("EXEC @procResult = [grs].[pr_GetGRSDealCountByStatus] @Exposurelist, @ERMSPersonID", exposurelistParam, ermsPersonIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<grs_PrLckGetLockedItem> grs_PrLckGetLockedItem(int? categoryId, int? itemId, int? userId)
        {
            int procResult;
            return grs_PrLckGetLockedItem(categoryId, itemId, userId, out procResult);
        }

        public List<grs_PrLckGetLockedItem> grs_PrLckGetLockedItem(int? categoryId, int? itemId, int? userId, out int procResult)
        {
            var categoryIdParam = new SqlParameter { ParameterName = "@CategoryID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = DBNull.Value;

            var itemIdParam = new SqlParameter { ParameterName = "@ItemID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = itemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!itemId.HasValue)
                itemIdParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@UserID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<grs_PrLckGetLockedItem>("EXEC @procResult = [grs].[pr_Lck_GetLockedItem] @CategoryID, @ItemID, @UserID", categoryIdParam, itemIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

    }

    // ************************************************************************
    // POCO Configuration

    // cfgRole
    public partial class CfgRoleMapping : EntityTypeConfiguration<CfgRole>
    {
        public CfgRoleMapping()
            : this("dbo")
        {
        }
 
        public CfgRoleMapping(string schema)
        {
            ToTable(schema + ".cfgRole");
            HasKey(x => x.RolePk);

            Property(x => x.RolePk).HasColumnName("RolePK").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.ParentRoleFk).HasColumnName("ParentRoleFK").IsOptional().HasColumnType("int");
            Property(x => x.ActiveDirectorySyncGuid).HasColumnName("ActiveDirectorySyncGUID").IsOptional().HasColumnType("uniqueidentifier");
            Property(x => x.Active).HasColumnName("Active").IsRequired().HasColumnType("bit");
            Property(x => x.SourceOfRole).HasColumnName("SourceOfRole").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.CfgRole_ParentRoleFk).WithMany(b => b.CfgRoles).HasForeignKey(c => c.ParentRoleFk); // FK_Role_Role
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // cfgRolePerson
    public partial class CfgRolePersonMapping : EntityTypeConfiguration<CfgRolePerson>
    {
        public CfgRolePersonMapping()
            : this("dbo")
        {
        }
 
        public CfgRolePersonMapping(string schema)
        {
            ToTable(schema + ".cfgRolePerson");
            HasKey(x => x.RolePersonPk);

            Property(x => x.RolePersonPk).HasColumnName("RolePersonPK").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.RoleFk).HasColumnName("RoleFK").IsRequired().HasColumnType("int");
            Property(x => x.PersonNameFk).HasColumnName("PersonNameFK").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.CfgRole).WithMany(b => b.CfgRolePersons).HasForeignKey(c => c.RoleFk); // FK_RolePerson_Role
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tbl_userviews
    public partial class grs_TblUserviewMapping : EntityTypeConfiguration<grs_TblUserview>
    {
        public grs_TblUserviewMapping()
            : this("grs")
        {
        }
 
        public grs_TblUserviewMapping(string schema)
        {
            ToTable(schema + ".tbl_userviews");
            HasKey(x => x.ViewId);

            Property(x => x.ViewId).HasColumnName("view_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Userid).HasColumnName("userid").IsRequired().HasColumnType("int");
            Property(x => x.Screenname).HasColumnName("screenname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Viewname).HasColumnName("viewname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.@Default).HasColumnName("default").IsRequired().HasColumnType("bit");
            Property(x => x.Layout).HasColumnName("layout").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Customview).HasColumnName("customview").IsRequired().HasColumnType("bit");
            Property(x => x.Sortorder).HasColumnName("sortorder").IsRequired().HasColumnType("int");
            Property(x => x.UserViewCreationDate).HasColumnName("UserViewCreationDate").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.TbUser).WithMany(b => b.grs_TblUserviews).HasForeignKey(c => c.Userid); // FK_tb_user_tbl_userviews
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_CatalogItemsExt
    public partial class grs_VCatalogItemsExtMapping : EntityTypeConfiguration<grs_VCatalogItemsExt>
    {
        public grs_VCatalogItemsExtMapping()
            : this("grs")
        {
        }
 
        public grs_VCatalogItemsExtMapping(string schema)
        {
            ToTable(schema + ".v_CatalogItemsExt");
            HasKey(x => new { x.Catid, x.Catorder, x.Code, x.Active });

            Property(x => x.Catid).HasColumnName("catid").IsRequired().HasColumnType("int");
            Property(x => x.Catorder).HasColumnName("catorder").IsRequired().HasColumnType("int");
            Property(x => x.Code).HasColumnName("code").IsRequired().HasColumnType("int");
            Property(x => x.Charcode).HasColumnName("charcode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.Name).HasColumnName("name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Active).HasColumnName("active").IsRequired().HasColumnType("bit");
            Property(x => x.Intdata1).HasColumnName("intdata1").IsOptional().HasColumnType("int");
            Property(x => x.Strdata1).HasColumnName("strdata1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.FloatData1).HasColumnName("FloatData1").IsOptional().HasColumnType("float");
            Property(x => x.AssumedFlag).HasColumnName("AssumedFlag").IsOptional().HasColumnType("int");
            Property(x => x.AssumedSortOder).HasColumnName("AssumedSortOder").IsOptional().HasColumnType("int");
            Property(x => x.AssumedName).HasColumnName("AssumedName").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CededFlag).HasColumnName("CededFlag").IsOptional().HasColumnType("int");
            Property(x => x.CededSortOrder).HasColumnName("CededSortOrder").IsOptional().HasColumnType("int");
            Property(x => x.CededName).HasColumnName("CededName").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_DMSFileType
    public partial class grs_VDmsFileTypeMapping : EntityTypeConfiguration<grs_VDmsFileType>
    {
        public grs_VDmsFileTypeMapping()
            : this("grs")
        {
        }
 
        public grs_VDmsFileTypeMapping(string schema)
        {
            ToTable(schema + ".v_DMSFileType");
            HasKey(x => new { x.DmsSystem, x.UnderwritingTeamFk, x.DocType, x.IsBound, x.FileType, x.IsOutward, x.Dealnum });

            Property(x => x.DmsSystem).HasColumnName("DmsSystem").IsRequired().HasColumnType("int");
            Property(x => x.UnderwritingTeamFk).HasColumnName("UnderwritingTeamFK").IsRequired().HasColumnType("int");
            Property(x => x.DocType).HasColumnName("DocType").IsRequired().HasColumnType("int");
            Property(x => x.IsBound).HasColumnName("IsBound").IsRequired().HasColumnType("tinyint");
            Property(x => x.FileType).HasColumnName("FileType").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.Folder).HasColumnName("Folder").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.DocumentLog).HasColumnName("DocumentLog").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.IsOutward).HasColumnName("IsOutward").IsRequired().HasColumnType("tinyint");
            Property(x => x.Dealnum).HasColumnName("dealnum").IsRequired().HasColumnType("int");
            Property(x => x.Producer).HasColumnName("producer").IsOptional().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_ExposureTreeExt
    public partial class grs_VExposureTreeExtMapping : EntityTypeConfiguration<grs_VExposureTreeExt>
    {
        public grs_VExposureTreeExtMapping()
            : this("grs")
        {
        }
 
        public grs_VExposureTreeExtMapping(string schema)
        {
            ToTable(schema + ".v_ExposureTreeExt");
            HasKey(x => new { x.ProductLineCode, x.ProductLineName, x.ExposureGroupCode, x.ExposureGroupName, x.ExposureTypeCode });

            Property(x => x.SubdivisionName).HasColumnName("SubdivisionName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.SubdivisionCode).HasColumnName("SubdivisionCode").IsOptional().HasColumnType("int");
            Property(x => x.ProductLineCode).HasColumnName("ProductLineCode").IsRequired().HasColumnType("int");
            Property(x => x.ProductLineName).HasColumnName("ProductLineName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.ExposureGroupCode).HasColumnName("ExposureGroupCode").IsRequired().HasColumnType("int");
            Property(x => x.ExposureGroupName).HasColumnName("ExposureGroupName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ExposureTypeCode).HasColumnName("ExposureTypeCode").IsRequired().HasColumnType("int");
            Property(x => x.ExposureTypeName).HasColumnName("ExposureTypeName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRDealStatus
    public partial class grs_VGrDealStatuMapping : EntityTypeConfiguration<grs_VGrDealStatu>
    {
        public grs_VGrDealStatuMapping()
            : this("grs")
        {
        }
 
        public grs_VGrDealStatuMapping(string schema)
        {
            ToTable(schema + ".v_GRDealStatus");
            HasKey(x => new { x.WorkflowId, x.WorkflowName, x.GroupId, x.GroupName, x.GroupSortOrder, x.StatusCode, x.StatusName, x.StatusSortOrder });

            Property(x => x.WorkflowId).HasColumnName("WorkflowID").IsRequired().HasColumnType("int");
            Property(x => x.WorkflowName).HasColumnName("WorkflowName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(8);
            Property(x => x.GroupId).HasColumnName("GroupID").IsRequired().HasColumnType("int");
            Property(x => x.GroupName).HasColumnName("GroupName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(23);
            Property(x => x.GroupSortOrder).HasColumnName("GroupSortOrder").IsRequired().HasColumnType("int");
            Property(x => x.StatusCode).HasColumnName("StatusCode").IsRequired().HasColumnType("int");
            Property(x => x.StatusName).HasColumnName("StatusName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(24);
            Property(x => x.StatusSortOrder).HasColumnName("StatusSortOrder").IsRequired().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRSBrokers
    public partial class grs_VGrsBrokerMapping : EntityTypeConfiguration<grs_VGrsBroker>
    {
        public grs_VGrsBrokerMapping()
            : this("grs")
        {
        }
 
        public grs_VGrsBrokerMapping(string schema)
        {
            ToTable(schema + ".v_GRSBrokers");
            HasKey(x => new { x.Locationid, x.Locationname });

            Property(x => x.Brokercontactid).HasColumnName("brokercontactid").IsOptional().HasColumnType("int");
            Property(x => x.Brokercontact).HasColumnName("brokercontact").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Firstname).HasColumnName("firstname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Lastname).HasColumnName("lastname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Email).HasColumnName("email").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Phone).HasColumnName("phone").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Fax).HasColumnName("fax").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Website).HasColumnName("website").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Mobilephone).HasColumnName("mobilephone").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Otherphone).HasColumnName("otherphone").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Otheremail).HasColumnName("otheremail").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Homephone).HasColumnName("homephone").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Homefax).HasColumnName("homefax").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Homeemail).HasColumnName("homeemail").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Officeextension).HasColumnName("officeextension").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Speeddial).HasColumnName("speeddial").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Brokerid).HasColumnName("brokerid").IsOptional().HasColumnType("int");
            Property(x => x.Broker).HasColumnName("broker").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Parentgrouptypeid).HasColumnName("parentgrouptypeid").IsOptional().HasColumnType("int");
            Property(x => x.Parentgrouptype).HasColumnName("parentgrouptype").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Brokergroupid).HasColumnName("brokergroupid").IsOptional().HasColumnType("int");
            Property(x => x.Brokergroupname).HasColumnName("brokergroupname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Locationid).HasColumnName("locationid").IsRequired().HasColumnType("int");
            Property(x => x.AmsCode).HasColumnName("AMSCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.Locationname).HasColumnName("locationname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Locationaddress).HasColumnName("locationaddress").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.Locationcity).HasColumnName("locationcity").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Locationstate).HasColumnName("locationstate").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Locationpostcode).HasColumnName("locationpostcode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Country).HasColumnName("country").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Parentcompanyname).HasColumnName("parentcompanyname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Brokercategories).HasColumnName("brokercategories").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Brokercategoryid).HasColumnName("brokercategoryid").IsOptional().HasColumnType("nvarchar");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRSCedants
    public partial class grs_VGrsCedantMapping : EntityTypeConfiguration<grs_VGrsCedant>
    {
        public grs_VGrsCedantMapping()
            : this("grs")
        {
        }
 
        public grs_VGrsCedantMapping(string schema)
        {
            ToTable(schema + ".v_GRSCedants");
            HasKey(x => new { x.Locationid, x.Locationname });

            Property(x => x.Cedantid).HasColumnName("cedantid").IsOptional().HasColumnType("int");
            Property(x => x.Cedant).HasColumnName("cedant").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Parentgrouptypeid).HasColumnName("parentgrouptypeid").IsOptional().HasColumnType("int");
            Property(x => x.Parentgrouptype).HasColumnName("parentgrouptype").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Cedantgroupid).HasColumnName("cedantgroupid").IsOptional().HasColumnType("int");
            Property(x => x.Cedantgroupname).HasColumnName("cedantgroupname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Locationid).HasColumnName("locationid").IsRequired().HasColumnType("int");
            Property(x => x.Locationname).HasColumnName("locationname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Locationaddress).HasColumnName("locationaddress").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.Locationcity).HasColumnName("locationcity").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Locationstate).HasColumnName("locationstate").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Locationpostcode).HasColumnName("locationpostcode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Country).HasColumnName("country").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Parentcompanyname).HasColumnName("parentcompanyname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Cedantcategories).HasColumnName("cedantcategories").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Cedantcategoryid).HasColumnName("cedantcategoryid").IsOptional().HasColumnType("nvarchar");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRSChecklistsByDeal
    public partial class grs_VGrsChecklistsByDealMapping : EntityTypeConfiguration<grs_VGrsChecklistsByDeal>
    {
        public grs_VGrsChecklistsByDealMapping()
            : this("grs")
        {
        }
 
        public grs_VGrsChecklistsByDealMapping(string schema)
        {
            ToTable(schema + ".v_GRSChecklistsByDeal");
            HasKey(x => new { x.Dealnum, x.Entitynum, x.Chklistnum, x.ChecklistName });

            Property(x => x.Dealnum).HasColumnName("dealnum").IsRequired().HasColumnType("int");
            Property(x => x.Entitynum).HasColumnName("entitynum").IsRequired().HasColumnType("int");
            Property(x => x.CategoryCharCode).HasColumnName("CategoryCharCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.Category).HasColumnName("Category").IsOptional().HasColumnType("int");
            Property(x => x.CategoryShortName).HasColumnName("CategoryShortName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.CategoryName).HasColumnName("CategoryName").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Catorder).HasColumnName("catorder").IsOptional().HasColumnType("int");
            Property(x => x.Chklistnum).HasColumnName("chklistnum").IsRequired().HasColumnType("int");
            Property(x => x.ChecklistName).HasColumnName("ChecklistName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Sortorder).HasColumnName("sortorder").IsOptional().HasColumnType("int");
            Property(x => x.Readonly).HasColumnName("Readonly").IsOptional().HasColumnType("bit");
            Property(x => x.Checked).HasColumnName("Checked").IsOptional().HasColumnType("bit");
            Property(x => x.PersonId).HasColumnName("PersonId").IsOptional().HasColumnType("int");
            Property(x => x.PersonName).HasColumnName("PersonName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.FirstName).HasColumnName("FirstName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.CheckedDateTime).HasColumnName("CheckedDateTime").IsOptional().HasColumnType("datetime");
            Property(x => x.Note).HasColumnName("Note").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRSContractTypes
    public partial class grs_VGrsContractTypeMapping : EntityTypeConfiguration<grs_VGrsContractType>
    {
        public grs_VGrsContractTypeMapping()
            : this("grs")
        {
        }
 
        public grs_VGrsContractTypeMapping(string schema)
        {
            ToTable(schema + ".v_GRSContractTypes");
            HasKey(x => new { x.Code, x.Catorder, x.Active });

            Property(x => x.RowId).HasColumnName("RowID").IsOptional().HasColumnType("bigint");
            Property(x => x.Code).HasColumnName("code").IsRequired().HasColumnType("int");
            Property(x => x.Catorder).HasColumnName("catorder").IsRequired().HasColumnType("int");
            Property(x => x.InsuranceName).HasColumnName("InsuranceName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Active).HasColumnName("active").IsRequired().HasColumnType("bit");
            Property(x => x.AssumedName).HasColumnName("AssumedName").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.AssumedFlag).HasColumnName("AssumedFlag").IsOptional().HasColumnType("int");
            Property(x => x.CededName).HasColumnName("CededName").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CededFlag).HasColumnName("CededFlag").IsOptional().HasColumnType("int");
            Property(x => x.Exposuretype).HasColumnName("exposuretype").IsOptional().HasColumnType("int");
            Property(x => x.Exposurename).HasColumnName("exposurename").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRSDeals
    public partial class grs_VGrsDealMapping : EntityTypeConfiguration<grs_VGrsDeal>
    {
        public grs_VGrsDealMapping()
            : this("grs")
        {
        }
 
        public grs_VGrsDealMapping(string schema)
        {
            ToTable(schema + ".v_GRSDeals");
            HasKey(x => new { x.Dealnum, x.DealpipelineComplete, x.InForce, x.Renewable, x.Division, x.PaperName, x.TeamName });

            Property(x => x.Dealnum).HasColumnName("dealnum").IsRequired().HasColumnType("int");
            Property(x => x.Dealname).HasColumnName("dealname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Contractnum).HasColumnName("contractnum").IsOptional().HasColumnType("int");
            Property(x => x.Inceptdate).HasColumnName("inceptdate").IsOptional().HasColumnType("datetime");
            Property(x => x.Expirydate).HasColumnName("expirydate").IsOptional().HasColumnType("datetime");
            Property(x => x.ExpiryEod).HasColumnName("Expiry_EOD").IsOptional().HasColumnType("bit");
            Property(x => x.Targetdt).HasColumnName("targetdt").IsOptional().HasColumnType("datetime");
            Property(x => x.ModelPriority).HasColumnName("ModelPriority").IsOptional().HasColumnType("int");
            Property(x => x.Submissiondate).HasColumnName("submissiondate").IsOptional().HasColumnType("datetime");
            Property(x => x.Status).HasColumnName("status").IsOptional().HasColumnType("int");
            Property(x => x.Outward).HasColumnName("outward").IsOptional().HasColumnType("int");
            Property(x => x.StatusName).HasColumnName("status_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.DealpipelineComplete).HasColumnName("DealpipelineComplete").IsRequired().HasColumnType("int");
            Property(x => x.InForce).HasColumnName("InForce").IsRequired().HasColumnType("int");
            Property(x => x.Renewable).HasColumnName("Renewable").IsRequired().HasColumnType("int");
            Property(x => x.Uw1).HasColumnName("uw1").IsOptional().HasColumnType("int");
            Property(x => x.Uw1Name).HasColumnName("uw1_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Uw2).HasColumnName("uw2").IsOptional().HasColumnType("int");
            Property(x => x.Uw2Name).HasColumnName("uw2_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Ta).HasColumnName("TA").IsOptional().HasColumnType("int");
            Property(x => x.TaName).HasColumnName("TA_Name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Modeller).HasColumnName("Modeller").IsOptional().HasColumnType("int");
            Property(x => x.ModellerName).HasColumnName("modeller_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Act1).HasColumnName("act1").IsOptional().HasColumnType("int");
            Property(x => x.Act1Name).HasColumnName("act1_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Broker).HasColumnName("broker").IsOptional().HasColumnType("int");
            Property(x => x.BrokerName).HasColumnName("broker_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.BrokerLocation).HasColumnName("broker_location").IsOptional().HasColumnType("int");
            Property(x => x.BrokerLocationname).HasColumnName("broker_locationname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.BrokerContact).HasColumnName("broker_contact").IsOptional().HasColumnType("int");
            Property(x => x.BrokerContactName).HasColumnName("broker_contact_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.BrokerCompanygroupId).HasColumnName("broker_companygroupId").IsOptional().HasColumnType("int");
            Property(x => x.BrokerCompanygroup).HasColumnName("broker_companygroup").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Division).HasColumnName("division").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Paper).HasColumnName("paper").IsOptional().HasColumnType("int");
            Property(x => x.PaperName).HasColumnName("paper_name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Team).HasColumnName("team").IsOptional().HasColumnType("int");
            Property(x => x.TeamName).HasColumnName("team_name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Exposuretype).HasColumnName("exposuretype").IsOptional().HasColumnType("int");
            Property(x => x.Continuous).HasColumnName("continuous").IsOptional().HasColumnType("bit");
            Property(x => x.Cedant).HasColumnName("Cedant").IsOptional().HasColumnType("int");
            Property(x => x.CedantName).HasColumnName("cedant_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.CedentLocation).HasColumnName("cedent_location").IsOptional().HasColumnType("int");
            Property(x => x.CedentLocationname).HasColumnName("cedent_locationname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.CedentCompanygroupId).HasColumnName("cedent_companygroupId").IsOptional().HasColumnType("int");
            Property(x => x.CedentCompanygroup).HasColumnName("cedent_companygroup").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Renewal).HasColumnName("renewal").IsOptional().HasColumnType("int");
            Property(x => x.RenewalName).HasColumnName("renewal_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Dealtype).HasColumnName("dealtype").IsOptional().HasColumnType("int");
            Property(x => x.DealtypeName).HasColumnName("dealtype_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Coveragetype).HasColumnName("coveragetype").IsOptional().HasColumnType("int");
            Property(x => x.CoveragetypeName).HasColumnName("coveragetype_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Policybasis).HasColumnName("policybasis").IsOptional().HasColumnType("int");
            Property(x => x.PolicybasisName).HasColumnName("policybasis_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Currency).HasColumnName("currency").IsOptional().HasColumnType("int");
            Property(x => x.CurrencyName).HasColumnName("currency_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.Domicile).HasColumnName("domicile").IsOptional().HasColumnType("int");
            Property(x => x.DomicileName).HasColumnName("domicile_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Region).HasColumnName("region").IsOptional().HasColumnType("int");
            Property(x => x.RegionName).HasColumnName("region_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ChkPreBindProc).HasColumnName("ChkPreBindProc").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.ChkModeling).HasColumnName("ChkModeling").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.ChkUwCompliance).HasColumnName("ChkUWCompliance").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRSDealCoverages
    public partial class grs_VGrsDealCoverageMapping : EntityTypeConfiguration<grs_VGrsDealCoverage>
    {
        public grs_VGrsDealCoverageMapping()
            : this("grs")
        {
        }
 
        public grs_VGrsDealCoverageMapping(string schema)
        {
            ToTable(schema + ".v_GRSDealCoverages");
            HasKey(x => new { x.Dealnum, x.CoverId, x.CoverName });

            Property(x => x.Dealnum).HasColumnName("dealnum").IsRequired().HasColumnType("int");
            Property(x => x.CoverId).HasColumnName("cover_id").IsRequired().HasColumnType("int");
            Property(x => x.CoverName).HasColumnName("cover_name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRSDealsByStatus
    public partial class grs_VGrsDealsByStatuMapping : EntityTypeConfiguration<grs_VGrsDealsByStatu>
    {
        public grs_VGrsDealsByStatuMapping()
            : this("grs")
        {
        }
 
        public grs_VGrsDealsByStatuMapping(string schema)
        {
            ToTable(schema + ".v_GRSDealsByStatus");
            HasKey(x => new { x.Dealnum, x.StatusCode, x.StatusName, x.DealPipelineComplete, x.InForce, x.Renewable, x.Division, x.PaperName, x.TeamName, x.StatusGroup, x.StatusGroupName, x.StatusGroupSortOrder, x.StatusSortOrder });

            Property(x => x.Dealnum).HasColumnName("dealnum").IsRequired().HasColumnType("int");
            Property(x => x.Dealname).HasColumnName("dealname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Contractnum).HasColumnName("contractnum").IsOptional().HasColumnType("int");
            Property(x => x.Inceptdate).HasColumnName("inceptdate").IsOptional().HasColumnType("datetime");
            Property(x => x.Expirydate).HasColumnName("expirydate").IsOptional().HasColumnType("datetime");
            Property(x => x.ExpiryEod).HasColumnName("Expiry_EOD").IsOptional().HasColumnType("bit");
            Property(x => x.Targetdt).HasColumnName("targetdt").IsOptional().HasColumnType("datetime");
            Property(x => x.ModelPriority).HasColumnName("ModelPriority").IsOptional().HasColumnType("int");
            Property(x => x.Submissiondate).HasColumnName("submissiondate").IsOptional().HasColumnType("datetime");
            Property(x => x.Status).HasColumnName("status").IsOptional().HasColumnType("int");
            Property(x => x.StatusName1).HasColumnName("status_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.StatusCode).HasColumnName("StatusCode").IsRequired().HasColumnType("int");
            Property(x => x.StatusName).HasColumnName("StatusName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(24);
            Property(x => x.DealPipelineComplete).HasColumnName("DealPipelineComplete").IsRequired().HasColumnType("int");
            Property(x => x.InForce).HasColumnName("InForce").IsRequired().HasColumnType("int");
            Property(x => x.Renewable).HasColumnName("Renewable").IsRequired().HasColumnType("int");
            Property(x => x.Uw1).HasColumnName("uw1").IsOptional().HasColumnType("int");
            Property(x => x.Uw1Name).HasColumnName("uw1_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Uw2).HasColumnName("uw2").IsOptional().HasColumnType("int");
            Property(x => x.Uw2Name).HasColumnName("uw2_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Ta).HasColumnName("TA").IsOptional().HasColumnType("int");
            Property(x => x.TaName).HasColumnName("TA_Name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Modeller).HasColumnName("Modeller").IsOptional().HasColumnType("int");
            Property(x => x.ModellerName).HasColumnName("modeller_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Act1).HasColumnName("act1").IsOptional().HasColumnType("int");
            Property(x => x.Act1Name).HasColumnName("act1_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Broker).HasColumnName("broker").IsOptional().HasColumnType("int");
            Property(x => x.BrokerName).HasColumnName("broker_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.BrokerLocation).HasColumnName("broker_location").IsOptional().HasColumnType("int");
            Property(x => x.BrokerLocationname).HasColumnName("broker_locationname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.BrokerContact).HasColumnName("broker_contact").IsOptional().HasColumnType("int");
            Property(x => x.BrokerContactName).HasColumnName("broker_contact_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.BrokerCompanygroupId).HasColumnName("broker_companygroupId").IsOptional().HasColumnType("int");
            Property(x => x.BrokerCompanygroup).HasColumnName("broker_companygroup").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Division).HasColumnName("division").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Paper).HasColumnName("paper").IsOptional().HasColumnType("int");
            Property(x => x.PaperName).HasColumnName("paper_name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Team).HasColumnName("team").IsOptional().HasColumnType("int");
            Property(x => x.TeamName).HasColumnName("team_name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Exposuretype).HasColumnName("exposuretype").IsOptional().HasColumnType("int");
            Property(x => x.StatusGroup).HasColumnName("StatusGroup").IsRequired().HasColumnType("int");
            Property(x => x.StatusGroupName).HasColumnName("StatusGroupName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(23);
            Property(x => x.StatusGroupSortOrder).HasColumnName("StatusGroupSortOrder").IsRequired().HasColumnType("int");
            Property(x => x.StatusSortOrder).HasColumnName("StatusSortOrder").IsRequired().HasColumnType("int");
            Property(x => x.Continuous).HasColumnName("continuous").IsOptional().HasColumnType("bit");
            Property(x => x.Cedant).HasColumnName("Cedant").IsOptional().HasColumnType("int");
            Property(x => x.CedantName).HasColumnName("cedant_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.CedentLocation).HasColumnName("cedent_location").IsOptional().HasColumnType("int");
            Property(x => x.CedentLocationname).HasColumnName("cedent_locationname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.CedentCompanygroupId).HasColumnName("cedent_companygroupId").IsOptional().HasColumnType("int");
            Property(x => x.CedentCompanygroup).HasColumnName("cedent_companygroup").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Renewal).HasColumnName("renewal").IsOptional().HasColumnType("int");
            Property(x => x.RenewalName).HasColumnName("renewal_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Dealtype).HasColumnName("dealtype").IsOptional().HasColumnType("int");
            Property(x => x.DealtypeName).HasColumnName("dealtype_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Coveragetype).HasColumnName("coveragetype").IsOptional().HasColumnType("int");
            Property(x => x.CoveragetypeName).HasColumnName("coveragetype_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Policybasis).HasColumnName("policybasis").IsOptional().HasColumnType("int");
            Property(x => x.PolicybasisName).HasColumnName("policybasis_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Currency).HasColumnName("currency").IsOptional().HasColumnType("int");
            Property(x => x.CurrencyName).HasColumnName("currency_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.Domicile).HasColumnName("domicile").IsOptional().HasColumnType("int");
            Property(x => x.DomicileName).HasColumnName("domicile_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Region).HasColumnName("region").IsOptional().HasColumnType("int");
            Property(x => x.RegionName).HasColumnName("region_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ChkPreBindProc).HasColumnName("ChkPreBindProc").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.ChkModeling).HasColumnName("ChkModeling").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.ChkUwCompliance).HasColumnName("ChkUWCompliance").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRSNotes
    public partial class grs_VGrsNoteMapping : EntityTypeConfiguration<grs_VGrsNote>
    {
        public grs_VGrsNoteMapping()
            : this("grs")
        {
        }
 
        public grs_VGrsNoteMapping(string schema)
        {
            ToTable(schema + ".v_GRSNotes");
            HasKey(x => x.Notenum);

            Property(x => x.Notenum).HasColumnName("notenum").IsRequired().HasColumnType("int");
            Property(x => x.Dealnum).HasColumnName("dealnum").IsOptional().HasColumnType("int");
            Property(x => x.Notedate).HasColumnName("notedate").IsOptional().HasColumnType("datetime");
            Property(x => x.Notetype).HasColumnName("notetype").IsOptional().HasColumnType("int");
            Property(x => x.Notes).HasColumnName("notes").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Whoentered).HasColumnName("whoentered").IsOptional().HasColumnType("int");
            Property(x => x.Name).HasColumnName("Name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.FirstName).HasColumnName("FirstName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.CreatedBy).HasColumnName("CreatedBy").IsOptional().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRSUserView
    public partial class grs_VGrsUserViewMapping : EntityTypeConfiguration<grs_VGrsUserView>
    {
        public grs_VGrsUserViewMapping()
            : this("grs")
        {
        }
 
        public grs_VGrsUserViewMapping(string schema)
        {
            ToTable(schema + ".v_GRSUserView");
            HasKey(x => new { x.ViewId, x.Userid, x.Screenname, x.Viewname, x.@Default, x.Customview, x.Sortorder });

            Property(x => x.ViewId).HasColumnName("view_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Userid).HasColumnName("userid").IsRequired().HasColumnType("int");
            Property(x => x.Screenname).HasColumnName("screenname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Viewname).HasColumnName("viewname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.@Default).HasColumnName("default").IsRequired().HasColumnType("bit");
            Property(x => x.Layout).HasColumnName("layout").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.UserViewCreationDate).HasColumnName("UserViewCreationDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Customview).HasColumnName("customview").IsRequired().HasColumnType("bit");
            Property(x => x.Sortorder).HasColumnName("sortorder").IsRequired().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_GRSWritingCompany
    public partial class grs_VGrsWritingCompanyMapping : EntityTypeConfiguration<grs_VGrsWritingCompany>
    {
        public grs_VGrsWritingCompanyMapping()
            : this("grs")
        {
        }
 
        public grs_VGrsWritingCompanyMapping(string schema)
        {
            ToTable(schema + ".v_GRSWritingCompany");
            HasKey(x => new { x.Papernum, x.Companyname, x.CompanyShortname, x.Active, x.HideUnusedClaimCategory });

            Property(x => x.Papernum).HasColumnName("papernum").IsRequired().HasColumnType("int");
            Property(x => x.Companyname).HasColumnName("companyname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Cpnum).HasColumnName("cpnum").IsOptional().HasColumnType("int");
            Property(x => x.Relatedcompany).HasColumnName("relatedcompany").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Address1).HasColumnName("address1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Address2).HasColumnName("address2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Address3).HasColumnName("address3").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.City).HasColumnName("city").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.State).HasColumnName("state").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Postalcode).HasColumnName("postalcode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Country).HasColumnName("country").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Phone).HasColumnName("phone").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Fax).HasColumnName("fax").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Imagefilename).HasColumnName("imagefilename").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.CompanyShortname).HasColumnName("company_shortname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.SlTrequired).HasColumnName("SLTrequired").IsOptional().HasColumnType("tinyint");
            Property(x => x.IpTrequired).HasColumnName("IPTrequired").IsOptional().HasColumnType("tinyint");
            Property(x => x.PolicynumberToken).HasColumnName("policynumber_token").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(8);
            Property(x => x.Currency).HasColumnName("currency").IsOptional().HasColumnType("int");
            Property(x => x.Territory).HasColumnName("territory").IsOptional().HasColumnType("int");
            Property(x => x.Active).HasColumnName("active").IsRequired().HasColumnType("tinyint");
            Property(x => x.HideUnusedClaimCategory).HasColumnName("HideUnusedClaimCategory").IsRequired().HasColumnType("bit");
            Property(x => x.JeCode).HasColumnName("JECode").IsOptional().IsFixedLength().IsUnicode(false).HasColumnType("char").HasMaxLength(3);
            Property(x => x.IsGrsDisplay).HasColumnName("IsGRSDisplay").IsOptional().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_KeyDocuments
    public partial class grs_VKeyDocumentMapping : EntityTypeConfiguration<grs_VKeyDocument>
    {
        public grs_VKeyDocumentMapping()
            : this("grs")
        {
        }
 
        public grs_VKeyDocumentMapping(string schema)
        {
            ToTable(schema + ".v_KeyDocuments");
            HasKey(x => new { x.Keydocid, x.Filenumber, x.Sortorder });

            Property(x => x.Keydocid).HasColumnName("keydocid").IsRequired().HasColumnType("int");
            Property(x => x.Filenumber).HasColumnName("filenumber").IsRequired().HasColumnType("int");
            Property(x => x.Producer).HasColumnName("producer").IsOptional().HasColumnType("int");
            Property(x => x.Docid).HasColumnName("docid").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.Docname).HasColumnName("docname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.Sortorder).HasColumnName("sortorder").IsRequired().HasColumnType("int");
            Property(x => x.Location).HasColumnName("location").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Drawer).HasColumnName("drawer").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(35);
            Property(x => x.Folderid).HasColumnName("folderid").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Foldername).HasColumnName("foldername").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Doctype).HasColumnName("doctype").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Ermsclasstype).HasColumnName("ermsclasstype").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Filetype).HasColumnName("filetype").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Dmspath).HasColumnName("dmspath").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(512);
            Property(x => x.Itemcategoryid).HasColumnName("itemcategoryid").IsOptional().HasColumnType("int");
            Property(x => x.Ermscategory).HasColumnName("ermscategory").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Lastupdateduser).HasColumnName("lastupdateduser").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Lasttimestamp).HasColumnName("lasttimestamp").IsOptional().HasColumnType("datetime");
            Property(x => x.Dmscreated).HasColumnName("dmscreated").IsOptional().HasColumnType("datetime");
            Property(x => x.Dmsupdated).HasColumnName("dmsupdated").IsOptional().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // v_PaperExt
    public partial class grs_VPaperExtMapping : EntityTypeConfiguration<grs_VPaperExt>
    {
        public grs_VPaperExtMapping()
            : this("grs")
        {
        }
 
        public grs_VPaperExtMapping(string schema)
        {
            ToTable(schema + ".v_PaperExt");
            HasKey(x => new { x.Papernum, x.Companyname, x.CompanyShortname, x.Active, x.CloseDate, x.RestrictDate, x.HideUnusedClaimCategory, x.RptExclude });

            Property(x => x.Papernum).HasColumnName("papernum").IsRequired().HasColumnType("int");
            Property(x => x.Companyname).HasColumnName("companyname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Cpnum).HasColumnName("cpnum").IsOptional().HasColumnType("int");
            Property(x => x.Addr1).HasColumnName("addr1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Addr2).HasColumnName("addr2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Addr3).HasColumnName("addr3").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.City).HasColumnName("city").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.State).HasColumnName("state").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Postalcode).HasColumnName("postalcode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Cty).HasColumnName("cty").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Phone).HasColumnName("phone").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Fax).HasColumnName("fax").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Imagefilename).HasColumnName("imagefilename").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.CompanyShortname).HasColumnName("company_shortname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.SlTrequired).HasColumnName("SLTrequired").IsOptional().HasColumnType("tinyint");
            Property(x => x.IpTrequired).HasColumnName("IPTrequired").IsOptional().HasColumnType("tinyint");
            Property(x => x.Territory).HasColumnName("Territory").IsOptional().HasColumnType("int");
            Property(x => x.Currency).HasColumnName("Currency").IsOptional().HasColumnType("int");
            Property(x => x.Active).HasColumnName("active").IsRequired().HasColumnType("tinyint");
            Property(x => x.CloseDate).HasColumnName("CloseDate").IsRequired().HasColumnType("datetime");
            Property(x => x.RestrictDate).HasColumnName("RestrictDate").IsRequired().HasColumnType("datetime");
            Property(x => x.PaperToken).HasColumnName("paper_token").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(8);
            Property(x => x.RptLastCloseDate).HasColumnName("RptLastCloseDate").IsOptional().HasColumnType("datetime");
            Property(x => x.HideUnusedClaimCategory).HasColumnName("HideUnusedClaimCategory").IsRequired().HasColumnType("bit");
            Property(x => x.ComplianceCloseDate).HasColumnName("ComplianceCloseDate").IsOptional().HasColumnType("datetime");
            Property(x => x.RptLastComplianceCloseDate).HasColumnName("RptLastComplianceCloseDate").IsOptional().HasColumnType("datetime");
            Property(x => x.OutwardCloseDate).HasColumnName("OutwardCloseDate").IsOptional().HasColumnType("datetime");
            Property(x => x.OutwardRestrictDate).HasColumnName("OutwardRestrictDate").IsOptional().HasColumnType("datetime");
            Property(x => x.RptLastOutwardCloseDate).HasColumnName("RptLastOutwardCloseDate").IsOptional().HasColumnType("datetime");
            Property(x => x.JeCode).HasColumnName("JECode").IsOptional().IsFixedLength().IsUnicode(false).HasColumnType("char").HasMaxLength(3);
            Property(x => x.ClaimsCloseDate).HasColumnName("ClaimsCloseDate").IsOptional().HasColumnType("datetime");
            Property(x => x.RptLastClaimsCloseDate).HasColumnName("RptLastClaimsCloseDate").IsOptional().HasColumnType("datetime");
            Property(x => x.RptExclude).HasColumnName("RptExclude").IsRequired().HasColumnType("bit");
            Property(x => x.RptJe).HasColumnName("RptJE").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(16);
            Property(x => x.CompanyPrintName).HasColumnName("companyPrintName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.AssumedFlag).HasColumnName("AssumedFlag").IsOptional().HasColumnType("int");
            Property(x => x.AssumedSortOrder).HasColumnName("AssumedSortOrder").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CededFlag).HasColumnName("CededFlag").IsOptional().HasColumnType("int");
            Property(x => x.CededSortOrder).HasColumnName("CededSortOrder").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tb_catalogdef
    public partial class TbCatalogdefMapping : EntityTypeConfiguration<TbCatalogdef>
    {
        public TbCatalogdefMapping()
            : this("dbo")
        {
        }
 
        public TbCatalogdefMapping(string schema)
        {
            ToTable(schema + ".tb_catalogdef");
            HasKey(x => x.Catid);

            Property(x => x.Catid).HasColumnName("catid").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Catname).HasColumnName("catname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Usecharcode).HasColumnName("usecharcode").IsOptional().HasColumnType("int");
            Property(x => x.Constname).HasColumnName("constname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.Intdesc1).HasColumnName("intdesc1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Strdesc1).HasColumnName("strdesc1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.FloatDesc1).HasColumnName("FloatDesc1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tb_catalogitems
    public partial class TbCatalogitemMapping : EntityTypeConfiguration<TbCatalogitem>
    {
        public TbCatalogitemMapping()
            : this("dbo")
        {
        }
 
        public TbCatalogitemMapping(string schema)
        {
            ToTable(schema + ".tb_catalogitems");
            HasKey(x => new { x.Catid, x.Code });

            Property(x => x.Catid).HasColumnName("catid").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Catorder).HasColumnName("catorder").IsRequired().HasColumnType("int");
            Property(x => x.Code).HasColumnName("code").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Charcode).HasColumnName("charcode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.Name).HasColumnName("name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Active).HasColumnName("active").IsRequired().HasColumnType("bit");
            Property(x => x.Intdata1).HasColumnName("intdata1").IsOptional().HasColumnType("int");
            Property(x => x.Strdata1).HasColumnName("strdata1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.FloatData1).HasColumnName("FloatData1").IsOptional().HasColumnType("float");

            // Foreign keys
            HasRequired(a => a.TbCatalogdef).WithMany(b => b.TbCatalogitems).HasForeignKey(c => c.Catid); // FK_tb_catalogitems_tb_catalogdef
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tb_chklistvals
    public partial class TbChklistvalMapping : EntityTypeConfiguration<TbChklistval>
    {
        public TbChklistvalMapping()
            : this("dbo")
        {
        }
 
        public TbChklistvalMapping(string schema)
        {
            ToTable(schema + ".tb_chklistvals");
            HasKey(x => new { x.Entitynum, x.Chklistnum, x.Key1, x.Key2, x.Key3 });

            Property(x => x.Entitynum).HasColumnName("entitynum").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Chklistnum).HasColumnName("chklistnum").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Key1).HasColumnName("key1").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Key2).HasColumnName("key2").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Key3).HasColumnName("key3").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Userid).HasColumnName("userid").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Completed).HasColumnName("completed").IsOptional().HasColumnType("datetime");
            Property(x => x.PersonId).HasColumnName("PersonId").IsOptional().HasColumnType("int");
            Property(x => x.Notes).HasColumnName("Notes").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tb_clauses
    public partial class TbClausMapping : EntityTypeConfiguration<TbClaus>
    {
        public TbClausMapping()
            : this("dbo")
        {
        }
 
        public TbClausMapping(string schema)
        {
            ToTable(schema + ".tb_clauses");
            HasKey(x => x.Dealnum);

            Property(x => x.Dealnum).HasColumnName("dealnum").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Clauses).HasColumnName("clauses").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Zzpremium).HasColumnName("zzpremium").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Ddesc).HasColumnName("ddesc").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Motive).HasColumnName("motive").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Psnotes).HasColumnName("psnotes").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Decreason).HasColumnName("decreason").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Cover).HasColumnName("cover").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Situation).HasColumnName("situation").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Zzexpana).HasColumnName("zzexpana").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Lossexp).HasColumnName("lossexp").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Prcana).HasColumnName("prcana").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Zzreinnotes).HasColumnName("zzreinnotes").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.UmIntroComment).HasColumnName("umIntroComment").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.UmExposureAndPricing).HasColumnName("umExposureAndPricing").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.UmLayerLoss).HasColumnName("umLayerLoss").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.UmWorstCaseScenario).HasColumnName("umWorstCaseScenario").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.UmOther).HasColumnName("umOther").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.PricingNotes).HasColumnName("PricingNotes").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);

            // Foreign keys
            HasRequired(a => a.TblDeal).WithOptional(b => b.TbClaus); // FK_tb_clauses_tbl_deals
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tb_ComGrpReq
    public partial class TbComGrpReqMapping : EntityTypeConfiguration<TbComGrpReq>
    {
        public TbComGrpReqMapping()
            : this("dbo")
        {
        }
 
        public TbComGrpReqMapping(string schema)
        {
            ToTable(schema + ".tb_ComGrpReq");
            HasKey(x => x.StatusId);

            Property(x => x.StatusId).HasColumnName("StatusId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Active).HasColumnName("Active").IsRequired().HasColumnType("bit");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tb_dealnotes
    public partial class TbDealnoteMapping : EntityTypeConfiguration<TbDealnote>
    {
        public TbDealnoteMapping()
            : this("dbo")
        {
        }
 
        public TbDealnoteMapping(string schema)
        {
            ToTable(schema + ".tb_dealnotes");
            HasKey(x => x.Notenum);

            Property(x => x.Notenum).HasColumnName("notenum").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Dealnum).HasColumnName("dealnum").IsOptional().HasColumnType("int");
            Property(x => x.Claimnum).HasColumnName("claimnum").IsOptional().HasColumnType("int");
            Property(x => x.Notedate).HasColumnName("notedate").IsOptional().HasColumnType("datetime");
            Property(x => x.Notetype).HasColumnName("notetype").IsOptional().HasColumnType("int");
            Property(x => x.Notes).HasColumnName("notes").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Dateentered).HasColumnName("dateentered").IsOptional().HasColumnType("datetime");
            Property(x => x.Whoentered).HasColumnName("whoentered").IsOptional().HasColumnType("int");
            Property(x => x.Whoresp).HasColumnName("whoresp").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Type4D).HasColumnName("type4d").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(15);
            Property(x => x.Amount).HasColumnName("amount").IsOptional().HasColumnType("int");
            Property(x => x.KeyNote).HasColumnName("KeyNote").IsRequired().HasColumnType("bit");
            Property(x => x.CreatedBy).HasColumnName("CreatedBy").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.TblDeal).WithMany(b => b.TbDealnotes).HasForeignKey(c => c.Dealnum); // FK_tb_dealnotes_tbl_deals
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tb_deal_pipeline
    public partial class TbDealPipelineMapping : EntityTypeConfiguration<TbDealPipeline>
    {
        public TbDealPipelineMapping()
            : this("dbo")
        {
        }
 
        public TbDealPipelineMapping(string schema)
        {
            ToTable(schema + ".tb_deal_pipeline");
            HasKey(x => x.DealNum);

            Property(x => x.DealNum).HasColumnName("DealNum").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Ta).HasColumnName("TA").IsOptional().HasColumnType("int");
            Property(x => x.ModelPriority).HasColumnName("ModelPriority").IsOptional().HasColumnType("int");
            Property(x => x.JobSize).HasColumnName("JobSize").IsOptional().HasColumnType("int");
            Property(x => x.KeyLocation).HasColumnName("KeyLocation").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.DeclineReason).HasColumnName("DeclineReason").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.ClaimsTeam).HasColumnName("ClaimsTeam").IsOptional().HasColumnType("int");
            Property(x => x.IsoglClassCodeFk).HasColumnName("ISOGLClassCodeFK").IsOptional().HasColumnType("int");
            Property(x => x.IntegrationReferenceKey).HasColumnName("IntegrationReferenceKey").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TimeToCalcTotalIncurred).HasColumnName("TimeToCalcTotalIncurred").IsOptional().HasColumnType("float");
            Property(x => x.AutoCalcClaimIncurred).HasColumnName("AutoCalcClaimIncurred").IsOptional().HasColumnType("tinyint");
            Property(x => x.AutoRefreshClaimLimitDed).HasColumnName("AutoRefreshClaimLimitDed").IsOptional().HasColumnType("tinyint");
            Property(x => x.ReviewClaimLimits).HasColumnName("ReviewClaimLimits").IsOptional().HasColumnType("tinyint");
            Property(x => x.QuotedDate).HasColumnName("QuotedDate").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.TblDeal).WithOptional(b => b.TbDealPipeline); // FK_deal_pipeline
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tb_DocChkValue
    public partial class TbDocChkValueMapping : EntityTypeConfiguration<TbDocChkValue>
    {
        public TbDocChkValueMapping()
            : this("dbo")
        {
        }
 
        public TbDocChkValueMapping(string schema)
        {
            ToTable(schema + ".tb_DocChkValue");
            HasKey(x => x.ValueId);

            Property(x => x.ValueId).HasColumnName("Value_Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ItemId).HasColumnName("Item_Id").IsRequired().HasColumnType("int");
            Property(x => x.Key1).HasColumnName("Key1").IsRequired().HasColumnType("int");
            Property(x => x.Key2).HasColumnName("Key2").IsOptional().HasColumnType("int");
            Property(x => x.Key3).HasColumnName("Key3").IsOptional().HasColumnType("int");
            Property(x => x.Reference).HasColumnName("Reference").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.FileFlag).HasColumnName("File_Flag").IsOptional().HasColumnType("tinyint");
            Property(x => x.DmsFlag).HasColumnName("DMS_Flag").IsOptional().HasColumnType("tinyint");
            Property(x => x.DmsDocId).HasColumnName("DMS_DocId").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.NaFlag).HasColumnName("NA_Flag").IsOptional().HasColumnType("tinyint");
            Property(x => x.LastUser).HasColumnName("Last_User").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.LastTimestamp).HasColumnName("Last_Timestamp").IsOptional().HasColumnType("smalldatetime");
            Property(x => x.Notes).HasColumnName("Notes").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.DmsDocName).HasColumnName("DMS_DocName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.DmsIsValid).HasColumnName("DMS_IsValid").IsOptional().HasColumnType("bit");
            Property(x => x.DmsCreated).HasColumnName("DMS_Created").IsOptional().HasColumnType("datetime");
            Property(x => x.DmsUpdated).HasColumnName("DMS_Updated").IsOptional().HasColumnType("datetime");
            Property(x => x.DmsFileType).HasColumnName("DMS_FileType").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DmsDocType).HasColumnName("DMS_DocType").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tbl_deals
    public partial class TblDealMapping : EntityTypeConfiguration<TblDeal>
    {
        public TblDealMapping()
            : this("dbo")
        {
        }
 
        public TblDealMapping(string schema)
        {
            ToTable(schema + ".tbl_deals");
            HasKey(x => x.Dealnum);

            Property(x => x.Dealnum).HasColumnName("dealnum").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Revnum).HasColumnName("revnum").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Dealname).HasColumnName("dealname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Cpartynum).HasColumnName("cpartynum").IsOptional().HasColumnType("int");
            Property(x => x.Capmgr).HasColumnName("capmgr").IsOptional().HasColumnType("int");
            Property(x => x.Busunit).HasColumnName("busunit").IsOptional().HasColumnType("int");
            Property(x => x.Cgrp).HasColumnName("cgrp").IsOptional().HasColumnType("int");
            Property(x => x.Liabtype).HasColumnName("liabtype").IsOptional().HasColumnType("int");
            Property(x => x.Exposuretype).HasColumnName("exposuretype").IsOptional().HasColumnType("int");
            Property(x => x.Underwriter).HasColumnName("underwriter").IsOptional().HasColumnType("int");
            Property(x => x.Currency).HasColumnName("currency").IsOptional().HasColumnType("int");
            Property(x => x.Source).HasColumnName("source").IsOptional().HasColumnType("int");
            Property(x => x.Rsource).HasColumnName("rsource").IsOptional().HasColumnType("int");
            Property(x => x.Bbroker).HasColumnName("bbroker").IsOptional().HasColumnType("int");
            Property(x => x.Rbroker).HasColumnName("rbroker").IsOptional().HasColumnType("int");
            Property(x => x.Zzhavedata).HasColumnName("zzhavedata").IsOptional().HasColumnType("int");
            Property(x => x.Prob).HasColumnName("prob").IsOptional().HasColumnType("int");
            Property(x => x.Estsize).HasColumnName("estsize").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Genericname).HasColumnName("genericname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Status).HasColumnName("status").IsOptional().HasColumnType("int");
            Property(x => x.Statusaction).HasColumnName("statusaction").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Datecreated).HasColumnName("datecreated").IsOptional().HasColumnType("datetime");
            Property(x => x.Lastupdtdt).HasColumnName("lastupdtdt").IsOptional().HasColumnType("datetime");
            Property(x => x.Submissiondate).HasColumnName("submissiondate").IsOptional().HasColumnType("datetime");
            Property(x => x.Targetdt).HasColumnName("targetdt").IsOptional().HasColumnType("datetime");
            Property(x => x.Yearbound).HasColumnName("yearbound").IsOptional().HasColumnType("int");
            Property(x => x.Contractnum).HasColumnName("contractnum").IsOptional().HasColumnType("int");
            Property(x => x.Pcdealnum).HasColumnName("pcdealnum").IsOptional().HasColumnType("int");
            Property(x => x.Inceptdate).HasColumnName("inceptdate").IsOptional().HasColumnType("datetime");
            Property(x => x.Binddate).HasColumnName("binddate").IsOptional().HasColumnType("datetime");
            Property(x => x.Riskdate).HasColumnName("riskdate").IsOptional().HasColumnType("datetime");
            Property(x => x.Cfdate).HasColumnName("cfdate").IsOptional().HasColumnType("datetime");
            Property(x => x.Expirydate).HasColumnName("expirydate").IsOptional().HasColumnType("datetime");
            Property(x => x.Dealcomment).HasColumnName("dealcomment").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Termdate).HasColumnName("termdate").IsOptional().HasColumnType("datetime");
            Property(x => x.Termreason).HasColumnName("termreason").IsOptional().HasColumnType("int");
            Property(x => x.Retrospective).HasColumnName("retrospective").IsOptional().HasColumnType("int");
            Property(x => x.Deposit).HasColumnName("deposit").IsOptional().HasColumnType("int");
            Property(x => x.Riskcatagory).HasColumnName("riskcatagory").IsOptional().HasColumnType("int");
            Property(x => x.Riskband).HasColumnName("riskband").IsOptional().HasColumnType("int");
            Property(x => x.Busclass).HasColumnName("busclass").IsOptional().HasColumnType("int");
            Property(x => x.Reinsurance).HasColumnName("reinsurance").IsOptional().HasColumnType("int");
            Property(x => x.Policybasis).HasColumnName("policybasis").IsOptional().HasColumnType("int");
            Property(x => x.Resvcatagory).HasColumnName("resvcatagory").IsOptional().HasColumnType("int");
            Property(x => x.Renewal).HasColumnName("renewal").IsOptional().HasColumnType("int");
            Property(x => x.Covtype).HasColumnName("covtype").IsOptional().HasColumnType("int");
            Property(x => x.Prembasis).HasColumnName("prembasis").IsOptional().HasColumnType("int");
            Property(x => x.Territory).HasColumnName("territory").IsOptional().HasColumnType("int");
            Property(x => x.Fwh).HasColumnName("fwh").IsOptional().HasColumnType("int");
            Property(x => x.Premdelay).HasColumnName("premdelay").IsOptional().HasColumnType("int");
            Property(x => x.Reportdelay).HasColumnName("reportdelay").IsOptional().HasColumnType("int");
            Property(x => x.Premtype).HasColumnName("premtype").IsOptional().HasColumnType("int");
            Property(x => x.Lossstatus).HasColumnName("lossstatus").IsOptional().HasColumnType("int");
            Property(x => x.Producer).HasColumnName("producer").IsOptional().HasColumnType("int");
            Property(x => x.Uw1).HasColumnName("uw1").IsOptional().HasColumnType("int");
            Property(x => x.Uw2).HasColumnName("uw2").IsOptional().HasColumnType("int");
            Property(x => x.Act1).HasColumnName("act1").IsOptional().HasColumnType("int");
            Property(x => x.Act2).HasColumnName("act2").IsOptional().HasColumnType("int");
            Property(x => x.Peer).HasColumnName("peer").IsOptional().HasColumnType("int");
            Property(x => x.Legal1).HasColumnName("legal1").IsOptional().HasColumnType("int");
            Property(x => x.Legal2).HasColumnName("legal2").IsOptional().HasColumnType("int");
            Property(x => x.Accting).HasColumnName("accting").IsOptional().HasColumnType("int");
            Property(x => x.Riskmgmt).HasColumnName("riskmgmt").IsOptional().HasColumnType("int");
            Property(x => x.Inclxpl).HasColumnName("inclxpl").IsOptional().HasColumnType("int");
            Property(x => x.Incleco).HasColumnName("incleco").IsOptional().HasColumnType("int");
            Property(x => x.Inclbio).HasColumnName("inclbio").IsOptional().HasColumnType("int");
            Property(x => x.Inclnuc).HasColumnName("inclnuc").IsOptional().HasColumnType("int");
            Property(x => x.Inclchem).HasColumnName("inclchem").IsOptional().HasColumnType("int");
            Property(x => x.Sunset).HasColumnName("sunset").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(125);
            Property(x => x.Sunrise).HasColumnName("sunrise").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(125);
            Property(x => x.Fileref).HasColumnName("fileref").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Mprognum).HasColumnName("mprognum").IsOptional().HasColumnType("int");
            Property(x => x.Outlook).HasColumnName("outlook").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(150);
            Property(x => x.Netdir).HasColumnName("netdir").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Glbusunit).HasColumnName("glbusunit").IsOptional().HasColumnType("int");
            Property(x => x.Glcovtype).HasColumnName("glcovtype").IsOptional().HasColumnType("int");
            Property(x => x.Glbustype).HasColumnName("glbustype").IsOptional().HasColumnType("int");
            Property(x => x.Glcty).HasColumnName("glcty").IsOptional().HasColumnType("int");
            Property(x => x.Glyrwritten).HasColumnName("glyrwritten").IsOptional().HasColumnType("int");
            Property(x => x.Geoseg).HasColumnName("geoseg").IsOptional().HasColumnType("int");
            Property(x => x.Outward).HasColumnName("outward").IsOptional().HasColumnType("int");
            Property(x => x.Claimsdir).HasColumnName("claimsdir").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Paper).HasColumnName("paper").IsOptional().HasColumnType("int");
            Property(x => x.Retrochked).HasColumnName("retrochked").IsOptional().HasColumnType("int");
            Property(x => x.Dealtype).HasColumnName("dealtype").IsOptional().HasColumnType("int");
            Property(x => x.Policynum).HasColumnName("policynum").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.Paydelay).HasColumnName("paydelay").IsOptional().HasColumnType("int");
            Property(x => x.Interco).HasColumnName("interco").IsRequired().HasColumnType("int");
            Property(x => x.IsAgg).HasColumnName("IsAgg").IsOptional().HasColumnType("bit");
            Property(x => x.ParentDeal).HasColumnName("ParentDeal").IsOptional().HasColumnType("int");
            Property(x => x.PlanGrp).HasColumnName("PlanGrp").IsOptional().HasColumnType("int");
            Property(x => x.Continuous).HasColumnName("continuous").IsOptional().HasColumnType("bit");
            Property(x => x.Sourcelocation).HasColumnName("sourcelocation").IsOptional().HasColumnType("int");
            Property(x => x.Rsourcelocation).HasColumnName("rsourcelocation").IsOptional().HasColumnType("int");
            Property(x => x.Cpartylocation).HasColumnName("cpartylocation").IsOptional().HasColumnType("int");
            Property(x => x.CalcExpType).HasColumnName("CalcExpType").IsOptional().HasColumnType("int");
            Property(x => x.Mga).HasColumnName("mga").IsOptional().HasColumnType("int");
            Property(x => x.Captivelocation).HasColumnName("captivelocation").IsOptional().HasColumnType("int");
            Property(x => x.Region).HasColumnName("Region").IsOptional().HasColumnType("int");
            Property(x => x.ExpiryEod).HasColumnName("Expiry_EOD").IsOptional().HasColumnType("bit");
            Property(x => x.QuoteByDate).HasColumnName("QuoteByDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ApprovalType).HasColumnName("ApprovalType").IsOptional().HasColumnType("int");
            Property(x => x.Modeller).HasColumnName("Modeller").IsOptional().HasColumnType("int");
            Property(x => x.ReviewByUw).HasColumnName("ReviewByUW").IsOptional().HasColumnType("bit");
            Property(x => x.Jecategory).HasColumnName("jecategory").IsOptional().HasColumnType("tinyint");
            Property(x => x.IntegrationSource).HasColumnName("IntegrationSource").IsRequired().HasColumnType("int");
            Property(x => x.AgreementId).HasColumnName("AgreementId").IsOptional().HasColumnType("int");
            Property(x => x.Downgraded).HasColumnName("downgraded").IsOptional().HasColumnType("bit");
            Property(x => x.Compliant).HasColumnName("compliant").IsOptional().HasColumnType("int");
            Property(x => x.Homestate).HasColumnName("homestate").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.NonrenewMaildt).HasColumnName("nonrenew_maildt").IsOptional().HasColumnType("datetime");
            Property(x => x.NoticecancMaildt).HasColumnName("noticecanc_maildt").IsOptional().HasColumnType("datetime");
            Property(x => x.NoticecancDuedt).HasColumnName("noticecanc_duedt").IsOptional().HasColumnType("datetime");
            Property(x => x.PmtReceived).HasColumnName("pmt_received").IsOptional().HasColumnType("bit");
            Property(x => x.PriorHistory).HasColumnName("prior_history").IsOptional().HasColumnType("bit");
            Property(x => x.Risklocation).HasColumnName("risklocation").IsOptional().HasColumnType("int");
            Property(x => x.BrokerTypeId).HasColumnName("BrokerTypeId").IsOptional().HasColumnType("int");
            Property(x => x.BrokerTypeId2).HasColumnName("BrokerTypeId2").IsOptional().HasColumnType("int");
            Property(x => x.ProjectIndicator).HasColumnName("ProjectIndicator").IsOptional().HasColumnType("int");
            Property(x => x.SlTransactionNumber).HasColumnName("SLTransactionNumber").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(14);
            Property(x => x.DeRegulated).HasColumnName("DeRegulated").IsOptional().HasColumnType("bit");
            Property(x => x.UAssistant).HasColumnName("UAssistant").IsOptional().HasColumnType("int");
            Property(x => x.TivAmount).HasColumnName("TIVAmount").IsOptional().HasColumnType("decimal");
            Property(x => x.OccupancyNum).HasColumnName("OccupancyNum").IsOptional().HasColumnType("int");
            Property(x => x.BusClassCode).HasColumnName("BusClassCode").IsOptional().HasColumnType("int");
            Property(x => x.SubmissionScore).HasColumnName("SubmissionScore").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.BindAmsCode).HasColumnName("BindAMSCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.BindAmsRegionCode).HasColumnName("BindAMSRegionCode").IsOptional().HasColumnType("int");
            Property(x => x.NaicsCode).HasColumnName("NAICSCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.RiskComplexityType).HasColumnName("RiskComplexityType").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(5);
            Property(x => x.IsManualBreakdown).HasColumnName("IsManualBreakdown").IsOptional().HasColumnType("bit");

            // Foreign keys
            HasOptional(a => a.TblDeal_ParentDeal).WithMany(b => b.TblDeals).HasForeignKey(c => c.ParentDeal); // FK_tbl_deals_parent
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tb_Person
    public partial class TbPersonMapping : EntityTypeConfiguration<TbPerson>
    {
        public TbPersonMapping()
            : this("dbo")
        {
        }
 
        public TbPersonMapping(string schema)
        {
            ToTable(schema + ".tb_Person");
            HasKey(x => new { x.PersonId, x.PersonName, x.PersonSid });

            Property(x => x.PersonId).HasColumnName("PersonId").IsRequired().HasColumnType("int");
            Property(x => x.LocationId).HasColumnName("LocationId").IsOptional().HasColumnType("int");
            Property(x => x.Nationality).HasColumnName("Nationality").IsOptional().HasColumnType("int");
            Property(x => x.LastName).HasColumnName("LastName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.FirstName).HasColumnName("FirstName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Prefix).HasColumnName("Prefix").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Ssn).HasColumnName("SSN").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(15);
            Property(x => x.AppointDate).HasColumnName("AppointDate").IsOptional().HasColumnType("smalldatetime");
            Property(x => x.ResignDate).HasColumnName("ResignDate").IsOptional().HasColumnType("smalldatetime");
            Property(x => x.JobTitle).HasColumnName("JobTitle").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Department).HasColumnName("Department").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.PersonAddress).HasColumnName("PersonAddress").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.PersonCity).HasColumnName("PersonCity").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.PersonState).HasColumnName("PersonState").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.PersonPostCode).HasColumnName("PersonPostCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.PersonCountryId).HasColumnName("PersonCountryId").IsOptional().HasColumnType("int");
            Property(x => x.ManagerName).HasColumnName("ManagerName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ManagerId).HasColumnName("ManagerId").IsOptional().HasColumnType("int");
            Property(x => x.AssistantName).HasColumnName("AssistantName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.AssistantId).HasColumnName("AssistantId").IsOptional().HasColumnType("int");
            Property(x => x.PersonNotes).HasColumnName("PersonNotes").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.PersonAddress2).HasColumnName("PersonAddress2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(255);
            Property(x => x.PersonCity2).HasColumnName("PersonCity2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.PersonState2).HasColumnName("PersonState2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.PersonPostCode2).HasColumnName("PersonPostCode2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.PersonCountryId2).HasColumnName("PersonCountryId2").IsOptional().HasColumnType("int");
            Property(x => x.CreatedBy).HasColumnName("CreatedBy").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.CreatedOn).HasColumnName("CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.UpdatedBy).HasColumnName("UpdatedBy").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.UpdatedOn).HasColumnName("UpdatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.PersonName).HasColumnName("PersonName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Deleted).HasColumnName("Deleted").IsOptional().HasColumnType("bit");
            Property(x => x.Biography).HasColumnName("Biography").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.CommonName).HasColumnName("CommonName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.FunctionalTitle).HasColumnName("FunctionalTitle").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.PersonSid).HasColumnName("PersonSID").IsRequired().HasColumnType("int");
            Property(x => x.CompanyId).HasColumnName("CompanyId").IsOptional().HasColumnType("int");
            Property(x => x.AmsContactGuid).HasColumnName("AMSContactGUID").IsOptional().HasColumnType("uniqueidentifier");
            Property(x => x.PersonStatus).HasColumnName("PersonStatus").IsOptional().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // tb_user
    public partial class TbUserMapping : EntityTypeConfiguration<TbUser>
    {
        public TbUserMapping()
            : this("dbo")
        {
        }
 
        public TbUserMapping(string schema)
        {
            ToTable(schema + ".tb_user");
            HasKey(x => x.Userid);

            Property(x => x.Userid).HasColumnName("userid").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Lastname).HasColumnName("lastname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(64);
            Property(x => x.Firstname).HasColumnName("firstname").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Middlename).HasColumnName("middlename").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Businessphone).HasColumnName("businessphone").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(24);
            Property(x => x.Faxphone).HasColumnName("faxphone").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(24);
            Property(x => x.Loginid).HasColumnName("loginid").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Emailid).HasColumnName("emailid").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(64);
            Property(x => x.Passwordtx).HasColumnName("passwordtx").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Loginexpdt).HasColumnName("loginexpdt").IsOptional().HasColumnType("datetime");
            Property(x => x.ContactNum).HasColumnName("ContactNum").IsOptional().HasColumnType("int");
            Property(x => x.AlternativeLoginId).HasColumnName("AlternativeLoginID").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Guid).HasColumnName("GUID").IsOptional().HasColumnType("uniqueidentifier");
            Property(x => x.Pguid).HasColumnName("PGUID").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.IsEnabled).HasColumnName("IsEnabled").IsRequired().HasColumnType("tinyint");
            Property(x => x.ReportId).HasColumnName("ReportID").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(64);
            Property(x => x.Sid).HasColumnName("SID").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DistinguishedName).HasColumnName("DistinguishedName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(900);
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>

